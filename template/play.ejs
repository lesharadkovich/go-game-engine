<% layout('layout/page') -%>
<% block('title', "Game") -%>

<script src="/vendor/bower_components/socket.io-client/dist/socket.io.js"></script>
<script src="/js/main.js"></script>
<link rel="stylesheet" href="/css/position.css"/>

<div id='gameSettings'>
  <div id='player'>
    <p>Выберите соперника</p>
    <button id='any' class="btn btn-primary player" onclick="chooseGameSettings(this)">Любой игрок</button>
    <p></p>
    <ul id='onlineList'></ul>
  </div>

  <div id='size' align='center'>
    <p>Выберите размер поля</p>
    <button id="5" class="btn btn-primary size" onclick="chooseGameSettings(this)">5x5</button>
    <button id="7" class="btn btn-primary size" onclick="chooseGameSettings(this)">7x7</button>
    <button id="9" class="btn btn-primary size" onclick="chooseGameSettings(this)">9x9</button>
    <button id="11" class="btn btn-primary size" onclick="chooseGameSettings(this)">11x11</button>
    <button id="13" class="btn btn-primary size" onclick="chooseGameSettings(this)">13x13</button>
    <button id="15" class="btn btn-primary size" onclick="chooseGameSettings(this)">15x15</button>
    <button id="17" class="btn btn-primary size" onclick="chooseGameSettings(this)">17x17</button>
    <button id="19" class="btn btn-primary size" onclick="chooseGameSettings(this)">19x19</button>
  </div>

  <div id='choice' align='center'></div>
</div>


<div id='info' class='status' style='display: none;' align='center'>
  <p></p>
  <button id='cancel' class="btn btn-primary player">Отмена</button>
</div>

<div id='invite' class='status' style='display: none;' align='center'>
  <p></p>
  <button id='agreed' class="btn btn-primary player">Принять</button>
  <button id='refused' class="btn btn-primary player">Отказаться</button>
</div>


<div id='game' align = "center" style='display: none;'>

  <h4 id='move'></h4>
  <h4 id='yourScore'></h4>
  <h4 id='enemyScore'></h4>

  <canvas id='canvas' class='ctx' width=700 height=700>Обновите браузер</canvas>

  <button id = "pass">
      <img src="img/pass.png" alt="PASS" style="vertical-align: middle">
  </button>

  <button id = "resign">
      <img src="img/resign.png" alt="RESIGN" style="vertical-align: middle">
  </button>

<!--
  <div id="room">
    <ul></ul>
    <form>
      <input class="form-control" autocomplete="off" placeholder="Сообщение...">
    </form>
  </div>


<div id='search' class='status' style='display: none;' align='center'>Поиск подходящего соперника</div>
-->
</div>

<div id="overlay" style='display: none;'></div>

<script>

  var gameSettings = $('#gameSettings');
  var search = $('#search');
  var online = $('#onlineList');
  var overlay = $('#overlay');
  var game = $('#game');

  var input = $('#room input');
  var ul = $('#room ul');
  var form = $('#room form');
  var canvas = document.getElementById('canvas');

  var info = $('#info');

  listenClick();

  var socket = io();

  socket
      //chat events
      .on('join', function(username, onlineListNames) {
        online.empty()
        onlineListNames.forEach(function(username) {
          $('<li class="online" onclick="choosePlayer(this)">').text(username).appendTo(online);
        });
      })
      .on('connect', function() {
        printStatus("соединение установлено");
        form.on('submit', sendMessage);
        input.prop('disabled', false);
      })
      .on('disconnect', function() {
        printStatus("соединение потеряно");
        form.off('submit', sendMessage);
        input.prop('disabled', true);
        this.emit('error');
      })
      .on('logout', function() {
        location.href = "/";
      })
      .on('error', function(reason) {
        if (reason == "handshake unauthorized") {
          printStatus("вы вышли из сайта");
        } else {
          setTimeout(function() {
            socket.socket.connect();
          }, 500);
        }
      })


      .on('online list', function(onlineListNames) {
        onlineListNames.forEach(function(username) {
          $('<li class="online player" onclick="chooseGameSettings(this)">').text(username).appendTo(online);
        });
      })


      //game events

      //listen if enemy refused the game invite
      .on('refused', function(username) {
        $('#info p').text(username + ' отказался играть');

        $('#cancel').click(function() {
          info.hide('slow');
          overlay.hide();
        });
      })
      //incoming invite to play
      .on('game invite', function(from) {
        var invite = $('#invite');

        $('#invite p').text(from + ' приглашает вас в игру. Принять вызов?');
        invite.show();
        overlay.show();

        $('#agreed').click(function() {
          socket.emit('agreed', true);
          invite.hide();
          overlay.hide();
        });

        $('#refused').click(function() {
          socket.emit('agreed', false);
          invite.hide();
          overlay.hide();
        });
      })

      .on('searching', function() {
        //gameSettings.hide('slow');
        overlay.show();
        $('#info p').text('Поиск подходящего противника');
        info.show('slow');

        $('#cancel').click(function() {
        //emit cancel event. delete game
          info.hide('slow');
          overlay.hide();
        });

      })
      .on('start game', function(username) {
        $('#info p').text('Начинается игра против ' + username);

        overlay.show();
        info.show();
        gameSettings.hide('slow');

        setTimeout(function() {
          overlay.hide();
          info.hide('slow');
          game.show('slow');
        }, 3000);
      })
      .on('change info text', function(move, yourScore, enemyScore) {
        changeGameInfoText(move, yourScore, enemyScore);
      })
      .on('drawBoard', function(board) {
        drawBoard(board);
      })
      .on('drawStone', function(addingCoords, stone, board, rules) {
        drawStone(addingCoords, stone, board, rules);
      })
      .on('deleteStones', function(surroundedCoords, rules, board, stone) {
        deleteStones(surroundedCoords, rules, board, stone);
      })
      .on('game over', function(result) {
        overlay.show();
        info.text(result);
        info.show('slow');

        // location.href = "/play";
      });

  function changeGameInfoText(move, yourScore, enemyScore) {
    var text;

    if(move) text = "Ваш ход";
    else text = "Ход противника";

    var moveInfo = $('#move');
    moveInfo.text(text);

    var yourScoreInfo = $('#yourScore');
    yourScoreInfo.text('Вас счет: ' + yourScore);

    var enemyScoreInfo = $('#enemyScore');
    enemyScoreInfo.text('Счет противника: ' + enemyScore);
  }

  var enemyName = null;
  var size = null;
  function chooseGameSettings(element) {
    if($(element).hasClass("player")) {
      enemyName = choosePlayer(element);
    }
    else if($(element).hasClass("size")) {
      size = chooseSize(element);
    }

    if(enemyName && size) {
      overlay.show();
      $('#info p').text('Ждем ответа от соперника');
      info.show('slow');

      $('#cancel').click(function() {
        //emit cancel event. delete game
        info.hide('slow');
        overlay.hide();
      });

      if(enemyName == ' ') socket.emit('new game', null, size);
      else socket.emit('new game', enemyName, size);
    }
  }

  function choosePlayer(element) {
    var choice = $('#choice');

    if(element.id == 'any') {
      choice.prepend('<p>Игрок: любой</p>');
      return ' ';
    }
    else if($(element).hasClass("online")) {
      choice.prepend('<p>Игрок: ' + $(element).text() +'</p>');
      return $(element).text();
    }
  }

  function chooseSize(element) {
    var size = +element.id;
    var choice = $('#choice');

    choice.append('Размер поля: ' + size + 'x' + size);

    return size;
  }


  function listenClick() {
      canvas.addEventListener('click', function (event) {
          var mousePos = getMousePos(event);

          socket.emit('move', mousePos);
      }, false);
  }

  function getMousePos() {
      var rect = canvas.getBoundingClientRect();

      return {
          x: event.clientX - rect.left,
          y: event.clientY - rect.top
      };
  }


  //chat functions
  function sendMessage() {
    var text = input.val();

    socket.emit('message', text, function() {
      printMessage("я: " + text);
    });

    input.val('');
    return false;
  }

  function printStatus(status) {
    $('<li>').append($('<i>').text(status)).appendTo(ul);
  }

  function printMessage(text) {
    $('<li>').text(text).appendTo(ul);
  }

</script>