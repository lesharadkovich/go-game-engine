<% layout('layout/page') -%>
<% block('title', "Game") -%>

<script src="/vendor/bower_components/socket.io-client/dist/socket.io.js"></script>
<script src="/js/main.js"></script>
<link rel="stylesheet" href="/css/position.css"/>

<div id='info' class='status' style='display: none;' align='center'>
  <p></p>
  <button id='cancel' class="btn btn-primary player">Отмена</button>
</div>

<div align='center'>
<h1 id='roomID'><%= room %></h1>
<h4 id='move'></h4>
<h4 id='yourScore'></h4>
<h4 id='enemyScore'></h4>

    <canvas id='canvas' class='ctx' width=700 height=700>Обновите браузер</canvas>

    <button id = "pass">
        <img src="/img/pass.png" alt="PASS" style="vertical-align: middle">
    </button>

    <button id = "resign">
        <img src="/img/resign.png" alt="RESIGN" style="vertical-align: middle">
    </button>
</div>
    
<!--
  <div id="room">
    <ul></ul>
    <form>
      <input class="form-control" autocomplete="off" placeholder="Сообщение...">
    </form>
  </div>
-->


<div id="overlay" style='display: none;'></div>

<script>

  var overlay = $('#overlay');
  var game = $('#game');

  var input = $('#room input');
  var ul = $('#room ul');
  var form = $('#room form');
  var canvas = document.getElementById('canvas');


    var room = $('#roomID').text();
    
  listenClick(room);
    

  var socket = io();

  socket
      //chat events
      .on('join', function() {
        //smth
      })
      .on('connect', function() {
//        printStatus("соединение установлено");
//        form.on('submit', sendMessage);
//        input.prop('disabled', false);
        
        socket.emit('start', room);
      })
      .on('disconnect', function() {
        printStatus("соединение потеряно");
        form.off('submit', sendMessage);
        input.prop('disabled', true);
        this.emit('error');
      })
      .on('logout', function() {
        location.href = "/";
      })
      .on('error', function(reason) {
        if (reason == "handshake unauthorized") {
          printStatus("вы вышли из сайта");
        } else {
          setTimeout(function() {
            socket.socket.connect();
          }, 500);
        }
      })


      //game events

      .on('change info text', function(move, yourScore, enemyScore) {
        changeGameInfoText(move, yourScore, enemyScore);
      })
      .on('drawBoard', function(board) {
        drawBoard(board);
      })
      .on('drawStone', function(addingCoords, stone, board, rules) {
        drawStone(addingCoords, stone, board, rules);
      })
      .on('deleteStones', function(surroundedCoords, rules, board, stone) {
        deleteStones(surroundedCoords, rules, board, stone);
      })
      .on('game over', function(result) {
        overlay.show();
        info.text(result);
        info.show('slow');

        //location.href = "/play";
      });

  function changeGameInfoText(move, yourScore, enemyScore) {
    var text;

    if(move) text = "Ваш ход";
    else text = "Ход противника";

    var moveInfo = $('#move');
    moveInfo.text(text);

    var yourScoreInfo = $('#yourScore');
    yourScoreInfo.text('Вас счет: ' + yourScore);

    var enemyScoreInfo = $('#enemyScore');
    enemyScoreInfo.text('Счет противника: ' + enemyScore);
  }

  function listenClick(room) {
      canvas.addEventListener('click', function (event) {
          var mousePos = getMousePos(event);

          socket.emit('move', mousePos, room);
      }, false);
  }

  function getMousePos() {
      var rect = canvas.getBoundingClientRect();

      return {
          x: event.clientX - rect.left,
          y: event.clientY - rect.top
      };
  }


  //chat functions
  function sendMessage() {
    var text = input.val();

    socket.emit('message', text, function() {
      printMessage("я: " + text);
    });

    input.val('');
    return false;
  }

  function printStatus(status) {
    $('<li>').append($('<i>').text(status)).appendTo(ul);
  }

  function printMessage(text) {
    $('<li>').text(text).appendTo(ul);
  }

</script>